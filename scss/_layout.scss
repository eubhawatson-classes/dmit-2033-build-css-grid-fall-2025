@use 'colours' as *;
@use 'sizing' as *;

.grid-container,
section {
    display: grid;
    gap: $baseline;
}

// We're declaring the page grid shell as a named container so we can write @container rules that reacts to its width (not the whole viewport). This line alone does not change the layout; it only enables container queries. 

.grid-container {
    margin: 0 auto;
    container-type: inline-size; // "please allow width-based queries on me"
    container-name: grid; // this is our nickname for when we're targeting it
}

section {
    margin-bottom: 3.375rem;
}

.popular-posts article {
    border: 1px solid c(color-border);
    border-radius: 4px;
    
    div {
        padding: $baseline $baseline 0 $baseline;
    }
}

@container grid (min-width: 740px) {
    .grid-container {
        grid-template-columns: repeat(12, 1fr);
    }

    .recent-posts,
    .popular-posts {
        grid-template-rows: min-content;
    }

    .recent-posts {
        grid-column: 1 / span 6;
        
        article {
            border-bottom: 1px solid c(color-border);
        }
    }

    .popular-posts {
        grid-column: 7 / span 6;
    }
}

@container grid (min-width: 992px) {
    .recent-posts {
        grid-column: 1 / span 8;
    }

    .popular-posts {
        grid-column: 9 / span 4;
    }
}