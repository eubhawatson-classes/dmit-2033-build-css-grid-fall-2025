/*

Q: Why does this module exist? 

So, problem first: plain Sass variables like $teal-700 are decided at compile time (that is, when you build your CSS). They can’t change when the user flips to dark mode later on. That’s a non-starter for theming.

Our fix is to emit CSS custom properties (the --thing: value; variables browsers understand) and then swap those values in dark mode. Sass’s job here is not to be clever at runtime; it’s just to help us organise and generate tidy CSS.

Instead of sprinkling brand shades like $teal-700 everywhere, we use semantic names like color-text, color-bg, color-accent. These names describe purpose, not pigment. In light mode and dark mode, the names stay identical, but their values differ. That’s the trick that makes a single codebase themeable.

*/

// We'll start by creating two small maps (which are basically dictionaries or associative arrays).
$light: (
    color-bg:           #eceff1,
    color-text:         #323232,
    color-muted:        #4b5563,
    color-border:       #cfd8dc,
    color-btn:          #262626,
    color-accent:       #00796b,
    color-accent-strong:#134e4a
);

$dark: (
    color-bg:           #292f35,
    color-text:         #eceff1,
    color-muted:        #cfd8dc,
    color-border:       #171717,
    color-btn:          #111,
    color-accent:       #26a69a,
    color-accent-strong:#00796b
);

/*

Below is a tiny helper function. It let us write: 

    color: c(color-text);

instead of the longer vanilla CSS version: 

    color: var(--color-text);

It's purely for convenience and to save us some typing later on.

*/

@function c($name) { @return var(--#{$name}); }

/*

@each is our Sass "foreach" loop. For each key ($key) and value ($value) in the map we created up above, it outputs a line like: 

    --color-text: #323232;

First, we loop through all of our default (light mode) variables; next, we create an @media rule for dark mode, then loop through and generate all of the dark mode colours.

*/

:root {
    @each $key, $value in $light { --#{$key}: #{$value}; } 
}

@media (prefers-color-scheme: dark) {
    :root { @each $key, $value in $dark { --#{$key}: #{$value}; }  }
}