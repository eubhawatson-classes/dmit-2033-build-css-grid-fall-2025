@charset "UTF-8";
/*

Q: Why does this module exist? 

So, problem first: plain Sass variables like $teal-700 are decided at compile time (that is, when you build your CSS). They can’t change when the user flips to dark mode later on. That’s a non-starter for theming.

Our fix is to emit CSS custom properties (the --thing: value; variables browsers understand) and then swap those values in dark mode. Sass’s job here is not to be clever at runtime; it’s just to help us organise and generate tidy CSS.

Instead of sprinkling brand shades like $teal-700 everywhere, we use semantic names like color-text, color-bg, color-accent. These names describe purpose, not pigment. In light mode and dark mode, the names stay identical, but their values differ. That’s the trick that makes a single codebase themeable.

*/
/*

Below is a tiny helper function. It let us write: 

    color: c(color-text);

instead of the longer vanilla CSS version: 

    color: var(--color-text);

It's purely for convenience and to save us some typing later on.

*/
/*

@each is our Sass "foreach" loop. For each key ($key) and value ($value) in the map we created up above, it outputs a line like: 

    --color-text: #323232;

First, we loop through all of our default (light mode) variables; next, we create an @media rule for dark mode, then loop through and generate all of the dark mode colours.

*/
:root {
  --color-bg: #eceff1;
  --color-text: #323232;
  --color-muted: #4b5563;
  --color-border: #cfd8dc;
  --color-btn: #262626;
  --color-accent: #00796b;
  --color-accent-strong: #134e4a;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-bg: #292f35;
    --color-text: #eceff1;
    --color-muted: #cfd8dc;
    --color-border: #171717;
    --color-btn: #111;
    --color-accent: #26a69a;
    --color-accent-strong: #00796b;
  }
}
* {
  box-sizing: border-box;
}

body {
  background-color: var(--color-bg);
  color: var(--color-text);
  font-family: "Inter", Arial, Helvetica, sans-serif;
  font-size: 1.125rem;
  line-height: 1.5;
  min-height: 100vh;
  scroll-behavior: smooth;
  text-rendering: optimizeSpeed;
}

img {
  display: block;
  max-width: 100%;
}

ul {
  list-style-type: none;
  padding: 0;
}

body,
h1,
h2,
h3,
p,
ul,
li {
  margin: 0;
}

article > * + * {
  margin-top: 1em;
}

.inner-container,
.grid-container {
  margin: 0 auto;
  max-width: 1600px;
}

header,
footer {
  padding: 1rem;
}

main {
  padding: 2rem 1rem;
}

h1 {
  font-size: 2.25rem;
  line-height: 2.5rem;
}

h2 {
  font-size: 1.875rem;
  line-height: 2.235rem;
}

h3 {
  font-size: 1.25rem;
  line-height: 1.75rem;
  margin-bottom: 1.6875rem;
}

p {
  font-size: 1.125rem;
  line-height: 1.75rem;
  margin-bottom: 1.6875rem;
}

a {
  color: var(--color-accent);
  text-decoration: none;
  transition: all 0.4s ease;
}
a:hover {
  color: var(--color-accent-strong);
}
a.article-link, a.btn {
  display: inline-block;
  margin-bottom: 3.375rem;
}
a.article-link {
  text-decoration: underline;
}
a.btn {
  background-color: var(--color-btn);
  border-radius: 0.25rem;
  color: white;
  padding: 0.84375rem 1.6875rem;
}
a.btn:hover {
  background-color: black;
}

header {
  border-bottom: 1px solid var(--color-border);
  box-shadow: 0 0 8px var(--color-border);
}
header .inner-container {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}
header .btn {
  background-color: var(--color-bg);
  border: none;
  cursor: pointer;
  font-size: 1rem;
  padding: 0.75rem;
  text-align: center;
}
header .btn svg {
  display: block;
}
header nav {
  flex: 0 0 100%;
  max-height: 0;
  overflow: hidden;
  transition: max-height ease-in-out 1s;
}
header nav.show {
  max-height: 275px;
}
header nav .menu-links li {
  line-height: 3.5rem;
  margin-bottom: 0.75rem;
}
header nav .menu-links li a {
  display: block;
  padding-left: 0.75rem;
}

@media screen and (min-width: 600px) {
  header .btn {
    display: none;
  }
  header nav {
    flex: 0 1 auto;
    max-height: unset;
  }
  header nav .menu-links {
    display: flex;
    gap: 1.6875rem;
  }
  header nav .menu-links li {
    margin-bottom: 0;
  }
}
.grid-container,
section {
  display: grid;
  gap: 1.6875rem;
}

.grid-container {
  margin: 0 auto;
  container-type: inline-size;
  container-name: grid;
}

section {
  margin-bottom: 3.375rem;
}

.popular-posts article {
  border: 1px solid var(--color-border);
  border-radius: 4px;
}
.popular-posts article div {
  padding: 1.6875rem 1.6875rem 0 1.6875rem;
}

@container grid (min-width: 740px) {
  .grid-container {
    grid-template-columns: repeat(12, 1fr);
  }
  .recent-posts,
  .popular-posts {
    grid-template-rows: min-content;
  }
  .recent-posts {
    grid-column: 1/span 6;
  }
  .recent-posts article {
    border-bottom: 1px solid var(--color-border);
  }
  .popular-posts {
    grid-column: 7/span 6;
  }
}
@container grid (min-width: 992px) {
  .recent-posts {
    grid-column: 1/span 8;
  }
  .popular-posts {
    grid-column: 9/span 4;
  }
}
form {
  display: flex;
  flex-wrap: wrap;
}
form input {
  border: 1px solid var(--color-accent);
  border-radius: 4px;
  line-height: 2.5rem;
  padding-left: 0.75rem;
  width: 100%;
}
form input:not([name=submit]) {
  border-radius: 4px 0 0 4px;
  flex: 1 0 3rem;
}
form input[name=submit] {
  background-color: var(--color-accent);
  border-radius: 0 4px 4px 0;
  color: white;
  cursor: pointer;
  flex: 0 1 3rem;
  padding: 0 0.84375rem;
  transition: background-color 0.3s ease;
}
form input[name=submit]:hover {
  background-color: var(--color-accent-strong);
}
form label {
  color: var(--color-muted);
  font-weight: 300;
  margin-bottom: 0.84375rem;
  width: 100%;
}

footer {
  border-top: 1px solid var(--color-border);
  padding: 3rem 1rem;
}
footer .inner-container {
  display: flex;
  flex-wrap: wrap;
  gap: 1.6875rem;
  justify-content: space-between;
}
footer .col {
  flex: 1;
}
footer .col:first-of-type, footer .col:last-of-type {
  flex: 1 1 100%;
}
footer .col:not(:first-of-type) h2 {
  font-size: 1.25rem;
}

@media screen and (min-width: 740px) {
  footer .col:last-of-type {
    flex: 1;
  }
}/*# sourceMappingURL=styles.css.map */